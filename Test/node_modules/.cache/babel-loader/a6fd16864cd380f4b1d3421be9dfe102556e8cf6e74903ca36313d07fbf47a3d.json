{"ast":null,"code":"var _jsxFileName = \"/Users/nikolaslopez/frontend/src/components/AdminHome.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { SERVER_URL } from '../constants';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AdminHome = () => {\n  _s();\n  const [students, setStudents] = useState([]);\n  const [newStudentName, setNewStudentName] = useState('');\n  const [newStudentEmail, setNewStudentEmail] = useState('');\n  const [newStudentHoldStatus, setNewStudentHoldStatus] = useState(false); // Hold status added\n  const [message, setMessage] = useState('');\n  const [selectedStudentId, setSelectedStudentId] = useState(null);\n  useEffect(() => {\n    // Called once after initial render\n    fetchStudents();\n  }, []);\n  const fetchStudents = studentId => {\n    const endpoint = `http://localhost:8080/students?studentId=${studentId}`;\n    fetch(endpoint).then(response => response.json()).then(data => {\n      setStudents(data);\n    }).catch(err => {\n      console.log(\"exception fetchStudents \" + err);\n      setMessage(\"Exception. \" + err);\n    });\n  };\n  const handleAddStudent = () => {\n    // Validate the email format\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    if (!emailRegex.test(newStudentEmail)) {\n      setMessage('Invalid email format');\n      return;\n    }\n\n    // Check if the email is unique\n    const isEmailUnique = students.every(student => student.email !== newStudentEmail);\n    if (!isEmailUnique) {\n      setMessage('Email already exists');\n      return;\n    }\n\n    // If email is valid and unique, create a new student object\n    const newStudent = {\n      name: newStudentName,\n      email: newStudentEmail,\n      holdStatus: newStudentHoldStatus // Set the hold status\n    };\n\n    // Add the new student to the students array and update the state\n    setStudents([...students, newStudent]);\n\n    // Clear the input fields\n    setNewStudentName('');\n    setNewStudentEmail('');\n    setNewStudentHoldStatus(false); // Reset the hold status\n\n    // Clear any previous error message\n    setMessage('');\n  };\n  const handleUpdateStudent = studentId => {\n    // Find the student by ID\n    const student = students.find(student => student.id === studentId);\n    if (!student) {\n      setMessage('Student not found');\n      return;\n    }\n\n    // Check if the new email is unique (excluding the current student's email)\n    const isEmailUnique = students.every(otherStudent => {\n      return otherStudent.id === studentId || otherStudent.email !== newStudentEmail;\n    });\n    if (!isEmailUnique) {\n      setMessage('Email already exists');\n      return;\n    }\n\n    // Update the student's information\n    const updatedStudents = students.map(otherStudent => {\n      if (otherStudent.id === studentId) {\n        return {\n          ...otherStudent,\n          name: newStudentName,\n          email: newStudentEmail,\n          holdStatus: newStudentHoldStatus\n        };\n      }\n      return otherStudent;\n    });\n    setStudents(updatedStudents);\n    setMessage('Student updated successfully');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        textAlign: 'center'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Student List\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: () => fetchStudents(),\n        children: \"Get\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: students.map(student => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [student.name, \" - \", student.email, /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleUpdateStudent(student.id),\n          children: \"Update\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 25\n        }, this)]\n      }, student.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Add Student\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Student Name\",\n        value: newStudentName,\n        onChange: e => setNewStudentName(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"email\",\n        placeholder: \"Student Email\",\n        value: newStudentEmail,\n        onChange: e => setNewStudentEmail(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Hold Status:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          checked: newStudentHoldStatus,\n          onChange: e => setNewStudentHoldStatus(e.target.checked)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: handleAddStudent,\n        children: \"Add\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 13\n    }, this), message && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 25\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 9\n  }, this);\n};\n_s(AdminHome, \"TxA1mfvnaFCOdOazMOTd5FFAtmc=\");\n_c = AdminHome;\nexport default AdminHome;\nvar _c;\n$RefreshReg$(_c, \"AdminHome\");","map":{"version":3,"names":["React","useState","useEffect","SERVER_URL","jsxDEV","_jsxDEV","AdminHome","_s","students","setStudents","newStudentName","setNewStudentName","newStudentEmail","setNewStudentEmail","newStudentHoldStatus","setNewStudentHoldStatus","message","setMessage","selectedStudentId","setSelectedStudentId","fetchStudents","studentId","endpoint","fetch","then","response","json","data","catch","err","console","log","handleAddStudent","emailRegex","test","isEmailUnique","every","student","email","newStudent","name","holdStatus","handleUpdateStudent","find","id","otherStudent","updatedStudents","map","children","style","textAlign","fileName","_jsxFileName","lineNumber","columnNumber","type","onClick","placeholder","value","onChange","e","target","checked","_c","$RefreshReg$"],"sources":["/Users/nikolaslopez/frontend/src/components/AdminHome.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { SERVER_URL } from '../constants';\n\nconst AdminHome = () => {\n    const [students, setStudents] = useState([]);\n    const [newStudentName, setNewStudentName] = useState('');\n    const [newStudentEmail, setNewStudentEmail] = useState('');\n    const [newStudentHoldStatus, setNewStudentHoldStatus] = useState(false); // Hold status added\n    const [message, setMessage] = useState('');\n    const [selectedStudentId, setSelectedStudentId] = useState(null);\n\n    useEffect(() => {\n        // Called once after initial render\n        fetchStudents();\n    }, []);\n\n    const fetchStudents = (studentId) => {\n        const endpoint = `http://localhost:8080/students?studentId=${studentId}`;\n\n        fetch(endpoint)\n            .then((response) => response.json())\n            .then((data) => {\n                setStudents(data);\n            })\n            .catch((err) => {\n                console.log(\"exception fetchStudents \" + err);\n                setMessage(\"Exception. \" + err);\n            });\n    };\n\n    const handleAddStudent = () => {\n        // Validate the email format\n        const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n        if (!emailRegex.test(newStudentEmail)) {\n            setMessage('Invalid email format');\n            return;\n        }\n\n        // Check if the email is unique\n        const isEmailUnique = students.every((student) => student.email !== newStudentEmail);\n\n        if (!isEmailUnique) {\n            setMessage('Email already exists');\n            return;\n        }\n\n        // If email is valid and unique, create a new student object\n        const newStudent = {\n            name: newStudentName,\n            email: newStudentEmail,\n            holdStatus: newStudentHoldStatus, // Set the hold status\n        };\n\n        // Add the new student to the students array and update the state\n        setStudents([...students, newStudent]);\n\n        // Clear the input fields\n        setNewStudentName('');\n        setNewStudentEmail('');\n        setNewStudentHoldStatus(false); // Reset the hold status\n\n        // Clear any previous error message\n        setMessage('');\n    };\n\n    const handleUpdateStudent = (studentId) => {\n        // Find the student by ID\n        const student = students.find((student) => student.id === studentId);\n\n        if (!student) {\n            setMessage('Student not found');\n            return;\n        }\n\n        // Check if the new email is unique (excluding the current student's email)\n        const isEmailUnique = students.every((otherStudent) => {\n            return otherStudent.id === studentId || otherStudent.email !== newStudentEmail;\n        });\n\n        if (!isEmailUnique) {\n            setMessage('Email already exists');\n            return;\n        }\n\n        // Update the student's information\n        const updatedStudents = students.map((otherStudent) => {\n            if (otherStudent.id === studentId) {\n                return {\n                    ...otherStudent,\n                    name: newStudentName,\n                    email: newStudentEmail,\n                    holdStatus: newStudentHoldStatus,\n                };\n            }\n            return otherStudent;\n        });\n\n        setStudents(updatedStudents);\n        setMessage('Student updated successfully');\n    };\n\n    return (\n        <div>\n            <div style={{ textAlign: 'center' }}>\n                <h3>Student List</h3>\n                <button type=\"button\" onClick={() => fetchStudents()}>\n                    Get\n                </button>\n            </div>\n\n            <ul>\n                {students.map((student) => (\n                    <li key={student.id}>\n                        {student.name} - {student.email}\n                        <button onClick={() => handleUpdateStudent(student.id)}>Update</button>\n                    </li>\n                ))}\n            </ul>\n\n            <div>\n                <h3>Add Student</h3>\n                <input\n                    type=\"text\"\n                    placeholder=\"Student Name\"\n                    value={newStudentName}\n                    onChange={(e) => setNewStudentName(e.target.value)}\n                />\n                <input\n                    type=\"email\"\n                    placeholder=\"Student Email\"\n                    value={newStudentEmail}\n                    onChange={(e) => setNewStudentEmail(e.target.value)}\n                />\n                <label>\n                    Hold Status:\n                    <input\n                        type=\"checkbox\"\n                        checked={newStudentHoldStatus}\n                        onChange={(e) => setNewStudentHoldStatus(e.target.checked)}\n                    />\n                </label>\n                <button type=\"button\" onClick={handleAddStudent}>\n                    Add\n                </button>\n            </div>\n\n            {message && <div>{message}</div>}\n        </div>\n    );\n};\n\nexport default AdminHome;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}