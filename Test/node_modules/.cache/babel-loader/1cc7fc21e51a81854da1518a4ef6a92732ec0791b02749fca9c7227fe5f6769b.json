{"ast":null,"code":"var _jsxFileName = \"/Users/nikolaslopez/frontend/src/components/SearchRecipe.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport Button from '@mui/material/Button';\nimport TextField from '@mui/material/TextField';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction SearchRecipe(props) {\n  _s();\n  const [recipes, setRecipes] = useState([]);\n  const [searchTerm, setSearchTerm] = useState('');\n  const handleSearch = () => {\n    // Fetch recipes from the MealDB API based on the search term\n    fetch(`https://www.themealdb.com/api/json/v1/1/search.php?s=${searchTerm}`).then(response => response.json()).then(data => {\n      // Update the recipes state with the fetched data\n      setRecipes(data.meals);\n    }).catch(error => {\n      console.error('Error fetching recipes:', error);\n    });\n  };\n  const handleTitleChange = event => {\n    setSearchTerm(event.target.value);\n  };\n  useEffect(() => {\n    // Fetch and display random recipes when the component mounts\n    fetch('https://www.themealdb.com/api/json/v1/1/random.php').then(response => response.json()).then(data => {\n      setRecipes(data.meals);\n    }).catch(error => {\n      console.error('Error fetching random recipes:', error);\n    });\n  }, []); // Empty dependency array to run this effect only once when the component mounts\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(TextField, {\n      id: \"searchTerm\",\n      autoFocus: true,\n      fullWidth: true,\n      label: \"Search Term\",\n      name: \"searchTerm\",\n      value: searchTerm,\n      onChange: handleTitleChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      id: \"searchRecipe\",\n      variant: \"outlined\",\n      color: \"primary\",\n      style: {\n        margin: 10\n      },\n      onClick: handleSearch,\n      children: \"Search Recipe\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), recipes.map(recipe => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: recipe.strMeal\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 11\n      }, this)\n    }, recipe.idMeal, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n}\n\n// required property:  addCourse is a function to call to perform the Add action\n_s(SearchRecipe, \"8kyW3D788M5ETVAGxl/sCkwWeR0=\");\n_c = SearchRecipe;\nSearchRecipe.propTypes = {\n  addCourse: PropTypes.func.isRequired\n};\nexport default SearchRecipe;\nvar _c;\n$RefreshReg$(_c, \"SearchRecipe\");","map":{"version":3,"names":["React","useState","useEffect","PropTypes","Button","TextField","jsxDEV","_jsxDEV","SearchRecipe","props","_s","recipes","setRecipes","searchTerm","setSearchTerm","handleSearch","fetch","then","response","json","data","meals","catch","error","console","handleTitleChange","event","target","value","children","id","autoFocus","fullWidth","label","name","onChange","fileName","_jsxFileName","lineNumber","columnNumber","variant","color","style","margin","onClick","map","recipe","strMeal","idMeal","_c","propTypes","addCourse","func","isRequired","$RefreshReg$"],"sources":["/Users/nikolaslopez/frontend/src/components/SearchRecipe.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport Button from '@mui/material/Button';\nimport TextField from '@mui/material/TextField';\n\nfunction SearchRecipe(props) {\n  const [recipes, setRecipes] = useState([]);\n  const [searchTerm, setSearchTerm] = useState('');\n\n  const handleSearch = () => {\n    // Fetch recipes from the MealDB API based on the search term\n    fetch(`https://www.themealdb.com/api/json/v1/1/search.php?s=${searchTerm}`)\n      .then((response) => response.json())\n      .then((data) => {\n        // Update the recipes state with the fetched data\n        setRecipes(data.meals);\n      })\n      .catch((error) => {\n        console.error('Error fetching recipes:', error);\n      });\n  };\n\n  const handleTitleChange = (event) => {\n    setSearchTerm(event.target.value);\n  };\n\n  useEffect(() => {\n    // Fetch and display random recipes when the component mounts\n    fetch('https://www.themealdb.com/api/json/v1/1/random.php')\n      .then((response) => response.json())\n      .then((data) => {\n        setRecipes(data.meals);\n      })\n      .catch((error) => {\n        console.error('Error fetching random recipes:', error);\n      });\n  }, []); // Empty dependency array to run this effect only once when the component mounts\n\n  return (\n    <div>\n      <TextField\n        id=\"searchTerm\"\n        autoFocus\n        fullWidth\n        label=\"Search Term\"\n        name=\"searchTerm\"\n        value={searchTerm}\n        onChange={handleTitleChange}\n      />\n      <Button\n        id=\"searchRecipe\"\n        variant=\"outlined\"\n        color=\"primary\"\n        style={{ margin: 10 }}\n        onClick={handleSearch}\n      >\n        Search Recipe\n      </Button>\n      {/* Display the fetched recipes */}\n      {recipes.map((recipe) => (\n        <div key={recipe.idMeal}>\n          <p>{recipe.strMeal}</p>\n          {/* Add other recipe details */}\n        </div>\n      ))}\n    </div>\n  );\n}\n\n// required property:  addCourse is a function to call to perform the Add action\nSearchRecipe.propTypes = {\n  addCourse: PropTypes.func.isRequired,\n};\n\nexport default SearchRecipe;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}